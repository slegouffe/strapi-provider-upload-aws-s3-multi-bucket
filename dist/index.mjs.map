{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["import type { ReadStream } from 'node:fs';\nimport { getOr } from 'lodash/fp';\nimport {\n  S3Client,\n  GetObjectCommand,\n  DeleteObjectCommand,\n  DeleteObjectCommandOutput,\n  PutObjectCommandInput,\n  CompleteMultipartUploadCommandOutput,\n  AbortMultipartUploadCommandOutput,\n  S3ClientConfig,\n  ObjectCannedACL,\n} from '@aws-sdk/client-s3';\nimport type { AwsCredentialIdentity } from '@aws-sdk/types';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { Upload } from '@aws-sdk/lib-storage';\nimport { extractCredentials, isUrlFromBucket } from './utils.js';\nimport { indexOf } from 'lodash';\n\nexport interface File {\n  name: string;\n  alternativeText?: string;\n  caption?: string;\n  width?: number;\n  height?: number;\n  formats?: Record<string, unknown>;\n  hash: string;\n  ext?: string;\n  mime: string;\n  size: number;\n  sizeInBytes: number;\n  url: string;\n  previewUrl?: string;\n  path?: string;\n  provider?: string;\n  provider_metadata?: Record<string, unknown>;\n  stream?: ReadStream;\n  buffer?: Buffer;\n}\n\nexport type UploadCommandOutput = (\n  | CompleteMultipartUploadCommandOutput\n  | AbortMultipartUploadCommandOutput\n) & {\n  Location: string;\n};\n\nexport interface AWSParams {\n  Bucket: string; // making it required\n  ACL?: ObjectCannedACL;\n  signedUrlExpires?: number;\n}\n\nexport interface DefaultOptions extends S3ClientConfig {\n  // TODO Remove this in V5\n  accessKeyId?: AwsCredentialIdentity['accessKeyId'];\n  secretAccessKey?: AwsCredentialIdentity['secretAccessKey'];\n  // Keep this for V5\n  credentials?: AwsCredentialIdentity;\n  params?: AWSParams;\n  [k: string]: any;\n}\n\nexport type InitOptions = (DefaultOptions | { s3Options: DefaultOptions }) & {\n  baseUrl?: string;\n  rootPath?: string;\n  [k: string]: any;\n};\n\nconst assertUrlProtocol = (url: string) => {\n  // Regex to test protocol like \"http://\", \"https://\"\n  return /^\\w*:\\/\\//.test(url);\n};\n\nconst getConfig = ({ baseUrl, rootPath, s3Options, ...legacyS3Options }: InitOptions) => {\n  if (Object.keys(legacyS3Options).length > 0) {\n    process.emitWarning(\n      \"S3 configuration options passed at root level of the plugin's providerOptions is deprecated and will be removed in a future release. Please wrap them inside the 's3Options:{}' property.\"\n    );\n  }\n  const credentials = extractCredentials({ s3Options, ...legacyS3Options });\n  const config = {\n    ...s3Options,\n    ...legacyS3Options,\n    ...(credentials ? { credentials } : {}),\n  };\n\n  config.params.ACL = getOr(ObjectCannedACL.public_read, ['params', 'ACL'], config);\n\n  return config;\n};\n\nexport default {\n  init({ baseUrl, rootPath, s3Options, ...legacyS3Options }: InitOptions) {\n    // TODO V5 change config structure to avoid having to do this\n    const config = getConfig({ baseUrl, rootPath, s3Options, ...legacyS3Options });\n    const s3Client = new S3Client(config);\n    const filePrefix = rootPath ? `${rootPath.replace(/\\/+$/, '')}/` : '';\n\n    const getFileKey = (file: File) => {\n      const path = file.path ? `${file.path}/` : '';\n      return `${filePrefix}${path}${file.hash}${file.ext}`;\n    };\n\n    const upload = async (file: File, customParams: Partial<PutObjectCommandInput> = {}) => {\n      try {\n        const fileKey = getFileKey(file);\n        const uploadObj = new Upload({\n          client: s3Client,\n          params: {\n            Bucket: config.params.CustomBucket || config.params.Bucket,\n            Key: fileKey,\n            Body: file.stream || Buffer.from(file.buffer as any, 'binary'),\n            ACL: config.params.CustomACL || config.params.ACL,\n            ContentType: file.mime,\n            ...customParams,\n          },\n        });\n\n        const upload = (await uploadObj.done()) as UploadCommandOutput;\n\n        if (assertUrlProtocol(upload.Location)) {\n          file.url = baseUrl ? `${baseUrl}/${fileKey}` : upload.Location;\n        } else {\n          // Default protocol to https protocol\n          file.url = `https://${upload.Location}`;\n        }\n      } catch(e) {\n        console.log(e)\n      }\n    };\n\n    return {\n      isPrivate() {\n        return config.params.ACL === 'private';\n      },\n\n      async getSignedUrl(file: File, customParams: any): Promise<{ url: string }> {\n        // Do not sign the url if it does not come from the same bucket.\n        const bucket = config.params.CustomBucket || config.params.Bucket;\n        if (!isUrlFromBucket(file.url, bucket, baseUrl)) {\n          return { url: file.url };\n        }\n        const fileKey = getFileKey(file);\n\n        const url = await getSignedUrl(\n          // @ts-expect-error - TODO fix client type\n          s3Client,\n          new GetObjectCommand({\n            Bucket: config.params.CustomBucket || config.params.Bucket,\n            Key: fileKey,\n            ...customParams,\n          }),\n          {\n            expiresIn: getOr(15 * 60, ['params', 'signedUrlExpires'], config),\n          }\n        );\n\n        return { url };\n      },\n      uploadStream(file: File, customParams = {}) {\n        return upload(file, customParams);\n      },\n      upload(file: File, customParams = {}) {\n        return upload(file, customParams);\n      },\n      delete(file: File, customParams = {}): Promise<DeleteObjectCommandOutput> {\n        const command = new DeleteObjectCommand({\n          Bucket: config.params.CustomBucket || config.params.Bucket,\n          Key: getFileKey(file),\n          ...customParams,\n        });\n        return s3Client.send(command);\n      },\n      setOptions(bucket: string, acl?: string) {\n        config.params.CustomBucket = bucket;\n        if (acl) {\n          config.params.CustomACL = acl;\n        }\n      },\n    };\n  },\n};\n"],"names":["assertUrlProtocol","url","test","getConfig","baseUrl","rootPath","s3Options","legacyS3Options","Object","keys","length","process","emitWarning","credentials","extractCredentials","config","params","ACL","getOr","ObjectCannedACL","public_read","init","s3Client","S3Client","filePrefix","replace","getFileKey","file","path","hash","ext","upload","customParams","fileKey","uploadObj","Upload","client","Bucket","CustomBucket","Key","Body","stream","Buffer","from","buffer","CustomACL","ContentType","mime","done","Location","e","console","log","isPrivate","getSignedUrl","bucket","isUrlFromBucket","GetObjectCommand","expiresIn","uploadStream","delete","command","DeleteObjectCommand","send","setOptions","acl"],"mappings":"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"}